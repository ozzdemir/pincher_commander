<launch>

  <!-- Enable rviz config -->
  <arg name="config" default="false" />

  <!-- By default, run in simulation mode -->
  <arg name="sim" default="false" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  
  <!-- Arm_type from environ.  NOTE: setting from arg not yet supported -->
  <arg name="arm_type" default="$(optenv TURTLEBOT_ARM1 pincher)"/>

	 <!-- To use, first set Environment variable TURTLEBOT_ARM1 to either:
   turtlebot or pincher (for Trossen PhantomX Pincher) -->
   
  <arg name="simulation" default="false"/>

  <!--Here we broadcast our final coordinate system for the gripper, since gripper_finger_base_link from the arbotix package is
      not centered at the gripper for our PhantomX Pincher arm. We choose the name gripper_link since the turtlebot_arm package depends on it. -->
  <!--node pkg="tf" type="static_transform_publisher" name="gripper_base_link" args="0 0 -0.01 0.5 -0.5 -0.5 0.5 gripper_finger_base_link gripper_link 50" /-->

  <!-- Unfortunately, we need a virtual helper joint that is part of the URDF -->
  <node name="fake_joint_pub" pkg="turtlebot_arm_description" type="fake_joint_pub.py" output="screen"/> 

  <!-- Now load robot model -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(turtlebot_arm_description)/urdf/pincher_arm.urdf.xacro'"/>
  <node name="robot_state_pub" pkg="robot_state_publisher" type="robot_state_publisher"/>
   
  <!-- Start Arbotix driver -->
  <node name="arbotix" pkg="arbotix_python" type="arbotix_driver" output="screen">
    <rosparam file="$(find phantomx_rst)/config/pincher_arm.yaml" command="load"/>
    <param name="sim" value="$(arg simulation)"/>
  </node>

  <!-- Start gripper controller -->
  <node name="gripper_controller" pkg="arbotix_controllers" type="gripper_controller" output="screen">
    <rosparam file="$(find phantomx_rst)/config/pincher_gripper.yaml" command="load" />
  </node>
  
  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(turtlebot_arm_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="arm_type" value="$(arg arm_type)"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- Publish fake joint states if we do not have a robot connected -->
  <node if="$(arg sim)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/> 
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>
  
  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable:
        - with trajectory execution, assuming we have controllers configured and running
        - without trajectory execution on simulation -->
  <include file="$(turtlebot_arm_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>  
    <arg name="fake_execution" value="$(arg sim)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(turtlebot_arm_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(turtlebot_arm_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"/>

</launch>
